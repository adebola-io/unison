[["/home/project/src/App.vue","<script setup lang=\"ts\">\nimport { ref, onMounted, computed } from 'vue';\nimport Peer from 'peerjs';\nimport { marked } from 'marked';\nimport { v4 as uuidv4 } from 'uuid';\n\ninterface Conversation {\n  id: string;\n  title: string;\n  peerId: string;\n  messages: { sender: string; content: string }[];\n}\n\nconst peerId = ref('');\nconst remotePeerId = ref('');\nconst message = ref('');\nconst conversations = ref<Conversation[]>([]);\nconst activeConversationId = ref<string | null>(null);\nconst peer = ref<Peer | null>(null);\nconst connections = ref<{ [key: string]: Peer.DataConnection }>({});\nconst errorMessage = ref('');\n\nconst activeConversation = computed(() => \n  conversations.value.find(c => c.id === activeConversationId.value) || null\n);\n\nonMounted(() => {\n  peer.value = new Peer();\n  peer.value.on('open', (id) => {\n    peerId.value = id;\n  });\n  peer.value.on('connection', (conn) => {\n    setupConnection(conn);\n  });\n});\n\nfunction connect() {\n  if (peer.value && remotePeerId.value) {\n    if (remotePeerId.value === peerId.value) {\n      errorMessage.value = \"You can't connect to yourself!\";\n      setTimeout(() => { errorMessage.value = ''; }, 3000);\n      return;\n    }\n    const conn = peer.value.connect(remotePeerId.value);\n    setupConnection(conn);\n  }\n}\n\nfunction setupConnection(conn: Peer.DataConnection) {\n  connections.value[conn.peer] = conn;\n  const newConversation: Conversation = { \n    id: uuidv4(), \n    title: `Chat with ${conn.peer.substring(0, 6)}...`, \n    peerId: conn.peer, \n    messages: [] \n  };\n  conversations.value.push(newConversation);\n  activeConversationId.value = newConversation.id;\n\n  conn.on('data', (data: string) => {\n    const conversation = conversations.value.find(c => c.peerId === conn.peer);\n    if (conversation) {\n      conversation.messages.push({ sender: 'Remote', content: data });\n    }\n  });\n}\n\nfunction sendMessage() {\n  if (activeConversationId.value && connections.value[activeConversation.value!.peerId] && message.value) {\n    const conn = connections.value[activeConversation.value!.peerId];\n    conn.send(message.value);\n    activeConversation.value!.messages.push({ sender: 'You', content: message.value });\n    message.value = '';\n  }\n}\n\nfunction renderMarkdown(content: string) {\n  return marked(content);\n}\n\nfunction newConversation() {\n  remotePeerId.value = '';\n  activeConversationId.value = null;\n}\n\nfunction deleteConversation(id: string) {\n  const index = conversations.value.findIndex(c => c.id === id);\n  if (index !== -1) {\n    conversations.value.splice(index, 1);\n    if (activeConversationId.value === id) {\n      activeConversationId.value = conversations.value.length > 0 ? conversations.value[0].id : null;\n    }\n  }\n}\n\nfunction renameConversation(id: string, newTitle: string) {\n  const conversation = conversations.value.find(c => c.id === id);\n  if (conversation) {\n    conversation.title = newTitle;\n  }\n}\n</script>\n\n<template>\n  <div class=\"chat-app\">\n    <div class=\"app-header\">\n      <h1 class=\"app-title\">Unison</h1>\n      <div class=\"peer-id\">Your Peer ID: {{ peerId }}</div>\n    </div>\n    <div class=\"chat-grid\">\n      <div v-if=\"!activeConversationId\" class=\"connect-form chat-box\">\n        <h2>Start a New Chat</h2>\n        <input v-model=\"remotePeerId\" placeholder=\"Enter remote Peer ID\" />\n        <button @click=\"connect\" class=\"connect-btn\">\n          <font-awesome-icon icon=\"link\" /> Connect\n        </button>\n        <div v-if=\"errorMessage\" class=\"error-message\">{{ errorMessage }}</div>\n      </div>\n      <div v-for=\"conv in conversations\" :key=\"conv.id\" class=\"chat-box\" :class=\"{ active: activeConversationId === conv.id }\">\n        <div class=\"chat-header\">\n          <input v-model=\"conv.title\" @blur=\"renameConversation(conv.id, conv.title)\" class=\"chat-title\" />\n          <button @click=\"deleteConversation(conv.id)\" class=\"delete-btn\">\n            <font-awesome-icon icon=\"trash\" />\n          </button>\n        </div>\n        <div class=\"messages\" @click=\"activeConversationId = conv.id\">\n          <div v-for=\"(msg, index) in conv.messages\" :key=\"index\" class=\"message\" :class=\"msg.sender.toLowerCase()\">\n            <strong>{{ msg.sender }}:</strong>\n            <div v-html=\"renderMarkdown(msg.content)\"></div>\n          </div>\n        </div>\n        <div v-if=\"activeConversationId === conv.id\" class=\"message-input\">\n          <textarea v-model=\"message\" placeholder=\"Type your message (Markdown supported)\"></textarea>\n          <button @click=\"sendMessage\" class=\"send-btn\">\n            <font-awesome-icon icon=\"paper-plane\" />\n          </button>\n        </div>\n      </div>\n    </div>\n    <button @click=\"newConversation\" class=\"new-chat-btn\">\n      <font-awesome-icon icon=\"plus\" /> New Chat\n    </button>\n  </div>\n</template>\n\n<style scoped>\n@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;700&display=swap');\n\n.chat-app {\n  max-width: 1200px;\n  margin: 2rem auto;\n  font-family: 'JetBrains Mono', monospace;\n  color: #e0e0e0;\n  position: relative;\n  z-index: 1;\n}\n\n.chat-app::before {\n  content: '';\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: \n    linear-gradient(to bottom, #0a0a0a, #0a1a0a),\n    repeating-linear-gradient(0deg, transparent, transparent 2px, rgba(0, 255, 0, 0.03) 2px, rgba(0, 255, 0, 0.03) 4px),\n    repeating-linear-gradient(90deg, transparent, transparent 2px, rgba(0, 255, 0, 0.03) 2px, rgba(0, 255, 0, 0.03) 4px);\n  z-index: -1;\n}\n\n.app-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 2rem;\n}\n\n.app-title {\n  font-size: 2.5rem;\n  color: #2ecc71;\n  margin: 0;\n}\n\n.peer-id {\n  background: rgba(46, 204, 113, 0.1);\n  color: #2ecc71;\n  padding: 10px;\n  border-radius: 8px;\n  font-size: 0.9rem;\n}\n\n.chat-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 20px;\n}\n\n.chat-box {\n  background: rgba(18, 18, 18, 0.8);\n  border-radius: 12px;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 0 0 1px rgba(46, 204, 113, 0.1);\n  transition: all 0.3s ease;\n  position: relative;\n}\n\n.chat-box::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: \n    linear-gradient(135deg, rgba(46, 204, 113, 0.1) 0%, transparent 100%),\n    linear-gradient(225deg, rgba(46, 204, 113, 0.1) 0%, transparent 100%);\n  opacity: 0.5;\n  z-index: 0;\n  pointer-events: none;\n}\n\n.chat-box.active {\n  box-shadow: 0 0 0 2px rgba(46, 204, 113, 0.5), 0 8px 16px rgba(0, 0, 0, 0.2);\n  transform: translateY(-4px);\n}\n\n.chat-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px;\n  background: rgba(0, 0, 0, 0.2);\n  border-bottom: 1px solid rgba(46, 204, 113, 0.2);\n}\n\n.chat-title {\n  background: transparent;\n  border: none;\n  color: #2ecc71;\n  font-size: 1rem;\n  font-weight: bold;\n  flex-grow: 1;\n  font-family: 'JetBrains Mono', monospace;\n}\n\n.delete-btn {\n  background: transparent;\n  border: none;\n  color: #e0e0e0;\n  cursor: pointer;\n  transition: color 0.3s ease;\n}\n\n.delete-btn:hover {\n  color: #ff6b6b;\n}\n\n.messages {\n  flex-grow: 1;\n  padding: 15px;\n  overflow-y: auto;\n  max-height: 300px;\n}\n\n.message {\n  margin-bottom: 10px;\n  padding: 8px 12px;\n  border-radius: 8px;\n  max-width: 80%;\n  animation: fadeIn 0.3s ease;\n  transition: all 0.3s ease;\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; transform: translateY(10px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n.message.you {\n  background-color: rgba(46, 204, 113, 0.1);\n  border: 1px solid rgba(46, 204, 113, 0.3);\n  align-self: flex-end;\n  margin-left: auto;\n}\n\n.message.remote {\n  background-color: rgba(52, 152, 219, 0.1);\n  border: 1px solid rgba(52, 152, 219, 0.3);\n  align-self: flex-start;\n}\n\n.message-input {\n  display: flex;\n  padding: 10px;\n  background: rgba(0, 0, 0, 0.2);\n  border-top: 1px solid rgba(46, 204, 113, 0.2);\n}\n\n.message-input textarea {\n  flex-grow: 1;\n  padding: 8px;\n  border: none;\n  border-radius: 4px;\n  background-color: rgba(255, 255, 255, 0.05);\n  color: #e0e0e0;\n  resize: none;\n  font-family: 'JetBrains Mono', monospace;\n  transition: all 0.3s ease;\n}\n\n.message-input textarea:focus {\n  background-color: rgba(255, 255, 255, 0.1);\n  outline: none;\n  box-shadow: 0 0 0 2px rgba(46, 204, 113, 0.3);\n}\n\n.connect-form {\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.connect-form h2 {\n  margin-top: 0;\n  color: #2ecc71;\n}\n\n.connect-form input {\n  padding: 10px;\n  border: none;\n  border-radius: 4px;\n  background-color: rgba(255, 255, 255, 0.05);\n  color: #e0e0e0;\n  font-family: 'JetBrains Mono', monospace;\n  transition: all 0.3s ease;\n}\n\n.connect-form input:focus {\n  background-color: rgba(255, 255, 255, 0.1);\n  outline: none;\n  box-shadow: 0 0 0 2px rgba(46, 204, 113, 0.3);\n}\n\n.connect-btn, .send-btn, .new-chat-btn {\n  padding: 10px 15px;\n  background-color: rgba(46, 204, 113, 0.2);\n  color: #2ecc71;\n  border: 1px solid rgba(46, 204, 113, 0.5);\n  border-radius: 4px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  font-family: 'JetBrains Mono', monospace;\n}\n\n.connect-btn:hover, .send-btn:hover, .new-chat-btn:hover {\n  background-color: rgba(46, 204, 113, 0.3);\n  transform: translateY(-2px);\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n.connect-btn:active, .send-btn:active, .new-chat-btn:active {\n  transform: translateY(0);\n  box-shadow: none;\n}\n\n.new-chat-btn {\n  margin-top: 20px;\n  width: 100%;\n}\n\n.error-message {\n  color: #ff6b6b;\n  font-size: 0.9rem;\n  margin-top: 10px;\n}\n\n@media (max-width: 768px) {\n  .chat-grid {\n    grid-template-columns: 1fr;\n  }\n}\n</style>"]]